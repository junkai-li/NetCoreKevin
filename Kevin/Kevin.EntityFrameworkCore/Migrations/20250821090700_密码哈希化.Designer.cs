// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Database;

#nullable disable

namespace Kevin.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(KevinDbContext))]
    [Migration("20250821090700_密码哈希化")]
    partial class 密码哈希化
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("kevin.Domain.Entities.THttpLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("device")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("device")
                        .HasComment("设备");

                    b.Property<string>("http_action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("http_action")
                        .HasComment("请求url不带参数");

                    b.Property<string>("http_body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("http_body")
                        .HasComment("请求内容");

                    b.Property<string>("http_method")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("http_method")
                        .HasComment("请求方法");

                    b.Property<string>("http_url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("http_url")
                        .HasComment("url");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("varchar(125)")
                        .HasColumnName("ip")
                        .HasComment("ip");

                    b.Property<string>("operate_remark")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("operate_remark")
                        .HasComment("操作备注");

                    b.Property<string>("operate_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("operate_type")
                        .HasComment("操作类型");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name")
                        .HasComment("登录人");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_http_log", null, t =>
                        {
                            t.HasComment("请求日志表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Entities.TTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code")
                        .HasComment("租户编码");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasComment("租户名称");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasComment("租户状态");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_tenant", null, t =>
                        {
                            t.HasComment("租户表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b4f94ac-b697-4cbe-9626-6cd2de627538"),
                            Code = 1000,
                            CreateTime = new DateTime(2025, 8, 21, 17, 6, 59, 830, DateTimeKind.Local).AddTicks(32),
                            IsDelete = 0ul,
                            Name = "admin",
                            Status = 1,
                            TenantId = 0,
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TAlipayKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("AesKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("aes_key")
                        .HasComment("支付宝加密解密密钥");

                    b.Property<string>("AlipayPublicKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("alipay_public_key")
                        .HasComment("支付宝公钥");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("app_id")
                        .HasComment("AppId");

                    b.Property<string>("AppPrivateKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("app_private_key")
                        .HasComment("App私钥");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_alipay_key", null, t =>
                        {
                            t.HasComment("支付宝平台账户配置表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("abstract")
                        .HasComment("摘要");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id")
                        .HasComment("类别ID");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int")
                        .HasColumnName("click_count")
                        .HasComment("点击数");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("内容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<ulong>("IsDisplay")
                        .HasColumnType("bit")
                        .HasColumnName("is_display")
                        .HasComment("是否显示");

                    b.Property<ulong>("IsRecommend")
                        .HasColumnType("bit")
                        .HasColumnName("is_recommend")
                        .HasComment("是否推荐");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title")
                        .HasComment("标题");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_article", null, t =>
                        {
                            t.HasComment("文章表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("channel_id")
                        .HasComment("频道ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("栏目名目");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_id")
                        .HasComment("父级栏目ID");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("t_category", null, t =>
                        {
                            t.HasComment("栏目信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("频道名称");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_channel", null, t =>
                        {
                            t.HasComment("频道信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("计数");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tag")
                        .HasComment("标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_count", null, t =>
                        {
                            t.HasComment("计数表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("key")
                        .HasComment("键");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("value")
                        .HasComment("值");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_dictionary", null, t =>
                        {
                            t.HasComment("t_dictionary");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("文件名称");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("path")
                        .HasComment("保存路径");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sign")
                        .HasComment("标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("table")
                        .HasComment("外链表名");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("table_id")
                        .HasComment("外链表ID");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_file", null, t =>
                        {
                            t.HasComment("文件表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("file_id")
                        .HasComment("文件ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<ulong>("Isfull")
                        .HasColumnType("bit")
                        .HasColumnName("isfull")
                        .HasComment("是否已完整传输");

                    b.Property<ulong>("Issynthesis")
                        .HasColumnType("bit")
                        .HasColumnName("issynthesis")
                        .HasComment("合成状态");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Slicing")
                        .HasColumnType("int")
                        .HasColumnName("slicing")
                        .HasComment("分片数");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("unique")
                        .HasComment("文件唯一值");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_file_group", null, t =>
                        {
                            t.HasComment("文件分片上传状态记录表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroupFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("file_id")
                        .HasComment("文件ID");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index")
                        .HasComment("文件索引值");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("path")
                        .HasComment("文件保存路径");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_file_group_file", null, t =>
                        {
                            t.HasComment("分片上传时的切片文件记录表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("名称");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("url")
                        .HasComment("地址");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_link", null, t =>
                        {
                            t.HasComment("友情链接表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("内容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sign")
                        .HasComment("标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type")
                        .HasComment("类型");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_log", null, t =>
                        {
                            t.HasComment("日志表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOSLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<Guid?>("ActionUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("action_user_id")
                        .HasComment("操作人信息");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("变动内容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<string>("DeviceMark")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("device_mark")
                        .HasComment("设备标记");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ip_address")
                        .HasComment("Ip地址");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sign")
                        .HasComment("标记");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("table")
                        .HasComment("外链表名");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("table_id")
                        .HasComment("外链表ID");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("ActionUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_o_s_log", null, t =>
                        {
                            t.HasComment("操作标记");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("order_no")
                        .HasComment("订单号");

                    b.Property<decimal>("PayPrice")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("pay_price")
                        .HasComment("实际支付金额");

                    b.Property<ulong>("PayState")
                        .HasColumnType("bit")
                        .HasColumnName("pay_state")
                        .HasComment("支付状态");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("pay_time")
                        .HasComment("支付时间");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pay_type")
                        .HasComment("支付方式");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("价格");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("serial_no")
                        .HasComment("支付流水号");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state")
                        .HasComment("订单状态");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type")
                        .HasComment("订单类型");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("update_user_id")
                        .HasComment("编辑人ID");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_order", null, t =>
                        {
                            t.HasComment("订单表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number")
                        .HasComment("产品数量");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasComment("订单ID");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id")
                        .HasComment("产品ID");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_order_detail", null, t =>
                        {
                            t.HasComment("订单详情表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action")
                        .HasComment("Action");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action_name")
                        .HasComment("动作名");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("area")
                        .HasComment("区域名称");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("area_name")
                        .HasComment("区域");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("full_name")
                        .HasComment("模块全名");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("http_method")
                        .HasComment("Method");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("icon")
                        .HasComment("图标");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<bool?>("IsManual")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_manual")
                        .HasComment("手动添加");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("module")
                        .HasComment("Module");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("module_name")
                        .HasComment("系统权限表");

                    b.Property<int?>("Seq")
                        .HasColumnType("int")
                        .HasColumnName("seq")
                        .HasComment("序号");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("update_user_id")
                        .HasComment("编辑人ID");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_time")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_permission", null, t =>
                        {
                            t.HasComment("系统权限表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("detail")
                        .HasComment("描述");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasComment("名称");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("价格");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("s_k_u")
                        .HasComment("SKU");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("update_user_id")
                        .HasComment("编辑人ID");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_product", null, t =>
                        {
                            t.HasComment("产品表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("area")
                        .HasComment("区域名称");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id")
                        .HasComment("所属城市ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("t_region_area", null, t =>
                        {
                            t.HasComment("区域信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("city")
                        .HasComment("城市名称");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id")
                        .HasComment("所属省份ID");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("t_region_city", null, t =>
                        {
                            t.HasComment("城市信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionProvince", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("province")
                        .HasComment("省份");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_region_province", null, t =>
                        {
                            t.HasComment("省份信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionTown", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("area_id")
                        .HasComment("所属区域ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("town")
                        .HasComment("街道名称");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("t_region_town", null, t =>
                        {
                            t.HasComment("街道信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("角色名称");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("remarks")
                        .HasComment("备注信息");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_role", null, t =>
                        {
                            t.HasComment("角色信息表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c23301b7-f9e0-464c-b76d-1f0a5a557548"),
                            CreateTime = new DateTime(2025, 8, 21, 17, 6, 59, 823, DateTimeKind.Local).AddTicks(2854),
                            IsDelete = 0ul,
                            Name = "admin",
                            Remarks = "admin",
                            TenantId = 1000,
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permission_id")
                        .HasComment("权限编号");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id")
                        .HasComment("角色编号");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("t_role_permission", null, t =>
                        {
                            t.HasComment("角色权限表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_user_id")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delete_user_id")
                        .HasComment("删除人ID");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("sign")
                        .HasComment("自定义标记");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table")
                        .HasComment("外链表名称");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("table_id")
                        .HasComment("外链记录ID");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_sign", null, t =>
                        {
                            t.HasComment("点赞或标记喜欢记录表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasComment("邮箱");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<ulong>("IsSuperAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_super_admin")
                        .HasComment("是否超级管理员");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasComment("用户名");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nick_name")
                        .HasComment("昵称");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash")
                        .HasComment("密码Hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasComment("手机号");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id")
                        .HasComment("角色信息");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time")
                        .HasComment("更新时间");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user", null, t =>
                        {
                            t.HasComment("用户表");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("eef5525d-5d64-46ad-8d64-79fb3ad9724f"),
                            CreateTime = new DateTime(2025, 8, 21, 17, 6, 59, 829, DateTimeKind.Local).AddTicks(3157),
                            Email = "admin",
                            IsDelete = 0ul,
                            IsSuperAdmin = 1ul,
                            Name = "admin",
                            NickName = "admin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Phone = "admin",
                            RoleId = new Guid("c23301b7-f9e0-464c-b76d-1f0a5a557548"),
                            TenantId = 1000,
                            UpdateTime = new DateTime(2025, 8, 21, 17, 6, 59, 829, DateTimeKind.Local).AddTicks(3182),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindAlipay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<Guid>("AlipayKeyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("alipay_key_id")
                        .HasComment("关联支付宝账户");

                    b.Property<string>("AlipayUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alipay_user_id")
                        .HasComment("支付宝UserId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id")
                        .HasComment("用户ID");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("AlipayKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("t_user_bind_alipay", null, t =>
                        {
                            t.HasComment("用户和支付宝绑定关系表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindWeixin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id")
                        .HasComment("用户ID");

                    b.Property<Guid>("WeiXinKeyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("wei_xin_key_id")
                        .HasComment("关联微信账户");

                    b.Property<string>("WeiXinOpenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wei_xin_open_id")
                        .HasComment("微信OpenId");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WeiXinKeyId");

                    b.ToTable("t_user_bind_weixin", null, t =>
                        {
                            t.HasComment("用户和微信绑定关系表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address")
                        .HasComment("地址详细信息");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company")
                        .HasComment("公司名称");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("position")
                        .HasComment("职务");

                    b.Property<string>("QQ")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("q_q")
                        .HasComment("q_q");

                    b.Property<int>("RegionAreaId")
                        .HasColumnType("int")
                        .HasColumnName("region_area_id")
                        .HasComment("地址区域ID");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<bool?>("Sex")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sex")
                        .HasComment("性别");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("signature")
                        .HasComment("个性签名");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id")
                        .HasComment("用户ID");

                    b.Property<string>("WeChat")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("we_chat")
                        .HasComment("we_chat");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("RegionAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("t_user_info", null, t =>
                        {
                            t.HasComment("用户详细信息表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TWebInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<string>("FootCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("foot_code")
                        .HasComment("网站底部代码");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("ManagerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("manager_address")
                        .HasComment("管理者地址");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manager_email")
                        .HasComment("管理者邮箱");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manager_name")
                        .HasComment("管理者名称");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("manager_phone")
                        .HasComment("管理者电话");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("record_number")
                        .HasComment("网站备案号");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("seo_description")
                        .HasComment("SEO描述");

                    b.Property<string>("SeoKeyWords")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("seo_key_words")
                        .HasComment("SEO关键字");

                    b.Property<string>("SeoTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("seo_title")
                        .HasComment("SEO标题");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("web_url")
                        .HasComment("网站域名");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_web_info", null, t =>
                        {
                            t.HasComment("网站信息配置表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TWeiXinKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_time")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_time")
                        .HasComment("删除时间");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete")
                        .HasComment("是否删除");

                    b.Property<string>("MchId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mch_id")
                        .HasComment("MchId");

                    b.Property<string>("MchKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mch_key")
                        .HasComment("MchKey");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<Guid?>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("row_version")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id")
                        .HasComment("租户ID_Code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type")
                        .HasComment("AppId 类型，['App','MiniApp','H5','Native']");

                    b.Property<string>("WxAppId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wx_app_id")
                        .HasComment("WxAppId");

                    b.Property<string>("WxAppSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wx_app_secret")
                        .HasComment("WxAppSecret");

                    b.Property<uint>("xmin")
                        .HasColumnType("int unsigned")
                        .HasColumnName("xmin")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.ToTable("t_wei_xin_key", null, t =>
                        {
                            t.HasComment("微信商户平台账户配置表");
                        });
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TArticle", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TCategory", "Category")
                        .WithMany("TArticle")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TChannel", "Channel")
                        .WithMany("TCategory")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Channel");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFile", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroup", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroupFile", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLink", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOSLog", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "ActionUser")
                        .WithMany()
                        .HasForeignKey("ActionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActionUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrderDetail", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TPermission", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TProduct", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionCity", "City")
                        .WithMany("TRegionArea")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionProvince", "Province")
                        .WithMany("TRegionCity")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionTown", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionArea", "Area")
                        .WithMany("TRegionTown")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRolePermission", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TSign", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUser", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRole", "Role")
                        .WithMany("RoleUserList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindAlipay", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TAlipayKey", "AlipayKey")
                        .WithMany()
                        .HasForeignKey("AlipayKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlipayKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindWeixin", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TWeiXinKey", "WeiXinKey")
                        .WithMany()
                        .HasForeignKey("WeiXinKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WeiXinKey");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserInfo", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionArea", "RegionArea")
                        .WithMany()
                        .HasForeignKey("RegionAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.Navigation("TArticle");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.Navigation("TCategory");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.Navigation("TRegionTown");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.Navigation("TRegionArea");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionProvince", b =>
                {
                    b.Navigation("TRegionCity");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRole", b =>
                {
                    b.Navigation("RoleUserList");
                });
#pragma warning restore 612, 618
        }
    }
}
