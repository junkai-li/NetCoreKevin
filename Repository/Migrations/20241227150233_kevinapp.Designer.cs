// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Database;

#nullable disable

namespace Kevin.Repository.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20241227150233_kevinapp")]
    partial class kevinapp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("kevin.Domain.Kevin.TAlipayKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("AesKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("aeskey")
                        .HasComment("AesKey");

                    b.Property<string>("AlipayPublicKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("alipaypublickey")
                        .HasComment("AlipayPublicKey");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("appid")
                        .HasComment("AppId");

                    b.Property<string>("AppPrivateKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("appprivatekey")
                        .HasComment("AppPrivateKey");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.ToTable("t_alipaykey", (string)null);

                    b.HasComment("TAlipayKey");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("abstract")
                        .HasComment("Abstract");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("categoryid")
                        .HasComment("CategoryId");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int")
                        .HasColumnName("clickcount")
                        .HasComment("ClickCount");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("Content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<ulong>("IsDisplay")
                        .HasColumnType("bit")
                        .HasColumnName("isdisplay")
                        .HasComment("IsDisplay");

                    b.Property<ulong>("IsRecommend")
                        .HasColumnType("bit")
                        .HasColumnName("isrecommend")
                        .HasComment("IsRecommend");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title")
                        .HasComment("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_article", (string)null);

                    b.HasComment("TArticle");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("channelid")
                        .HasComment("ChannelId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parentid")
                        .HasComment("ParentId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("t_category", (string)null);

                    b.HasComment("TCategory");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_channel", (string)null);

                    b.HasComment("TChannel");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("Count");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tag")
                        .HasComment("Tag");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("t_count", (string)null);

                    b.HasComment("TCount");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key")
                        .HasComment("Key");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value")
                        .HasComment("Value");

                    b.HasKey("Id");

                    b.ToTable("t_dictionary", (string)null);

                    b.HasComment("TDictionary");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("path")
                        .HasComment("Path");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sign")
                        .HasComment("Sign");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("table")
                        .HasComment("Table");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tableid")
                        .HasComment("TableId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_file", (string)null);

                    b.HasComment("TFile");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("fileid")
                        .HasComment("FileId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<ulong>("Isfull")
                        .HasColumnType("bit")
                        .HasColumnName("isfull")
                        .HasComment("Isfull");

                    b.Property<ulong>("Issynthesis")
                        .HasColumnType("bit")
                        .HasColumnName("issynthesis")
                        .HasComment("Issynthesis");

                    b.Property<int>("Slicing")
                        .HasColumnType("int")
                        .HasColumnName("slicing")
                        .HasComment("Slicing");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("unique")
                        .HasComment("Unique");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_filegroup", (string)null);

                    b.HasComment("TFileGroup");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroupFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("fileid")
                        .HasComment("FileId");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index")
                        .HasComment("Index");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("path")
                        .HasComment("Path");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_filegroupfile", (string)null);

                    b.HasComment("TFileGroupFile");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TImgBaiduAI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("fileid")
                        .HasComment("FileId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("result")
                        .HasComment("Result");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unique")
                        .HasComment("Unique");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_imgbaiduai", (string)null);

                    b.HasComment("TImgBaiduAI");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("url")
                        .HasComment("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_link", (string)null);

                    b.HasComment("TLink");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("Content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sign")
                        .HasComment("Sign");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type")
                        .HasComment("Type");

                    b.HasKey("Id");

                    b.ToTable("t_log", (string)null);

                    b.HasComment("TLog");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("orderno")
                        .HasComment("OrderNo");

                    b.Property<decimal>("PayPrice")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("payprice")
                        .HasComment("PayPrice");

                    b.Property<ulong>("PayState")
                        .HasColumnType("bit")
                        .HasColumnName("paystate")
                        .HasComment("PayState");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paytime")
                        .HasComment("PayTime");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("paytype")
                        .HasComment("PayType");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("Price");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("serialno")
                        .HasComment("SerialNo");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state")
                        .HasComment("State");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type")
                        .HasComment("Type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("updateuserid")
                        .HasComment("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_order", (string)null);

                    b.HasComment("TOrder");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number")
                        .HasComment("Number");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("orderid")
                        .HasComment("OrderId");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("productid")
                        .HasComment("ProductId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_orderdetail", (string)null);

                    b.HasComment("TOrderDetail");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOSLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<Guid?>("ActionUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("actionuserid")
                        .HasComment("ActionUserId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasComment("Content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<string>("DeviceMark")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("devicemark")
                        .HasComment("DeviceMark");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ipaddress")
                        .HasComment("IpAddress");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sign")
                        .HasComment("Sign");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("table")
                        .HasComment("Table");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tableid")
                        .HasComment("TableId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ActionUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_oslog", (string)null);

                    b.HasComment("TOSLog");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action")
                        .HasComment("Action");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("actionname")
                        .HasComment("ActionName");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("area")
                        .HasComment("Area");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("areaname")
                        .HasComment("AreaName");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("fullname")
                        .HasComment("FullName");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("httpmethod")
                        .HasComment("HttpMethod");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("icon")
                        .HasComment("Icon");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<bool?>("IsManual")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ismanual")
                        .HasComment("IsManual");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("module")
                        .HasComment("Module");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modulename")
                        .HasComment("ModuleName");

                    b.Property<int?>("Seq")
                        .HasColumnType("int")
                        .HasColumnName("seq")
                        .HasComment("Seq");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("updateuserid")
                        .HasComment("UpdateUserId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatedtime")
                        .HasComment("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_permission", (string)null);

                    b.HasComment("TPermission");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("detail")
                        .HasComment("Detail");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("Price");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("sku")
                        .HasComment("SKU");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("updateuserid")
                        .HasComment("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_product", (string)null);

                    b.HasComment("TProduct");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("area")
                        .HasComment("Area");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityid")
                        .HasComment("CityId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("t_regionarea", (string)null);

                    b.HasComment("TRegionArea");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("city")
                        .HasComment("City");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("provinceid")
                        .HasComment("ProvinceId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("t_regioncity", (string)null);

                    b.HasComment("TRegionCity");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionProvince", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("province")
                        .HasComment("Province");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.ToTable("t_regionprovince", (string)null);

                    b.HasComment("TRegionProvince");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionTown", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("areaid")
                        .HasComment("AreaId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("town")
                        .HasComment("Town");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("t_regiontown", (string)null);

                    b.HasComment("TRegionTown");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.ToTable("t_role", (string)null);

                    b.HasComment("TRole");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permissionid")
                        .HasComment("PermissionId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleid")
                        .HasComment("RoleId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("t_rolepermission", (string)null);

                    b.HasComment("TRolePermission");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createuserid")
                        .HasComment("CreateUserId");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("deleteuserid")
                        .HasComment("DeleteUserId");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("sign")
                        .HasComment("Sign");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table")
                        .HasComment("Table");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tableid")
                        .HasComment("TableId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_sign", (string)null);

                    b.HasComment("TSign");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasComment("Email");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<ulong>("IsSuperAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("issuperadmin")
                        .HasComment("IsSuperAdmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nickname")
                        .HasComment("NickName");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasComment("PassWord");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasComment("Phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleid")
                        .HasComment("RoleId");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatetime")
                        .HasComment("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user", (string)null);

                    b.HasComment("TUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindAlipay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<Guid>("AlipayKeyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("alipaykeyid")
                        .HasComment("AlipayKeyId");

                    b.Property<string>("AlipayUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alipayuserid")
                        .HasComment("AlipayUserId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userid")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlipayKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("t_userbindalipay", (string)null);

                    b.HasComment("TUserBindAlipay");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindWeixin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userid")
                        .HasComment("UserId");

                    b.Property<Guid>("WeiXinKeyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("weixinkeyid")
                        .HasComment("WeiXinKeyId");

                    b.Property<string>("WeiXinOpenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("weixinopenid")
                        .HasComment("WeiXinOpenId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WeiXinKeyId");

                    b.ToTable("t_userbindweixin", (string)null);

                    b.HasComment("TUserBindWeixin");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address")
                        .HasComment("Address");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company")
                        .HasComment("Company");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("position")
                        .HasComment("Position");

                    b.Property<string>("QQ")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("qq")
                        .HasComment("QQ");

                    b.Property<int>("RegionAreaId")
                        .HasColumnType("int")
                        .HasColumnName("regionareaid")
                        .HasComment("RegionAreaId");

                    b.Property<bool?>("Sex")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sex")
                        .HasComment("Sex");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("signature")
                        .HasComment("Signature");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userid")
                        .HasComment("UserId");

                    b.Property<string>("WeChat")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("wechat")
                        .HasComment("WeChat");

                    b.HasKey("Id");

                    b.HasIndex("RegionAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("t_userinfo", (string)null);

                    b.HasComment("TUserInfo");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TWebInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<string>("FootCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("footcode")
                        .HasComment("FootCode");

                    b.Property<string>("ManagerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("manageraddress")
                        .HasComment("ManagerAddress");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manageremail")
                        .HasComment("ManagerEmail");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("managername")
                        .HasComment("ManagerName");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("managerphone")
                        .HasComment("ManagerPhone");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("recordnumber")
                        .HasComment("RecordNumber");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("seodescription")
                        .HasComment("SeoDescription");

                    b.Property<string>("SeoKeyWords")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("seokeywords")
                        .HasComment("SeoKeyWords");

                    b.Property<string>("SeoTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("seotitle")
                        .HasComment("SeoTitle");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("weburl")
                        .HasComment("WebUrl");

                    b.HasKey("Id");

                    b.ToTable("t_webinfo", (string)null);

                    b.HasComment("TWebInfo");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TWeiXinKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasComment("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("CreateTime");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletetime")
                        .HasComment("DeleteTime");

                    b.Property<ulong>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("IsDelete");

                    b.Property<string>("MchId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mchid")
                        .HasComment("MchId");

                    b.Property<string>("MchKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mchkey")
                        .HasComment("MchKey");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("remarks")
                        .HasComment("Remarks");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("Sort");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenantid")
                        .HasComment("TenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type")
                        .HasComment("Type");

                    b.Property<string>("WxAppId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wxappid")
                        .HasComment("WxAppId");

                    b.Property<string>("WxAppSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wxappsecret")
                        .HasComment("WxAppSecret");

                    b.HasKey("Id");

                    b.ToTable("t_weixinkey", (string)null);

                    b.HasComment("TWeiXinKey");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TArticle", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TCategory", "Category")
                        .WithMany("TArticle")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TChannel", "Channel")
                        .WithMany("TCategory")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Channel");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFile", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroup", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TFileGroupFile", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TImgBaiduAI", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TLink", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrderDetail", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOSLog", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "ActionUser")
                        .WithMany()
                        .HasForeignKey("ActionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActionUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TPermission", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TProduct", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionCity", "City")
                        .WithMany("TRegionArea")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionProvince", "Province")
                        .WithMany("TRegionCity")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionTown", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionArea", "Area")
                        .WithMany("TRegionTown")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRolePermission", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("kevin.Domain.Kevin.TPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TSign", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUser", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRole", "Role")
                        .WithMany("RoleUserList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindAlipay", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TAlipayKey", "AlipayKey")
                        .WithMany()
                        .HasForeignKey("AlipayKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlipayKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserBindWeixin", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TWeiXinKey", "WeiXinKey")
                        .WithMany()
                        .HasForeignKey("WeiXinKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WeiXinKey");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TUserInfo", b =>
                {
                    b.HasOne("kevin.Domain.Kevin.TRegionArea", "RegionArea")
                        .WithMany()
                        .HasForeignKey("RegionAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kevin.Domain.Kevin.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TCategory", b =>
                {
                    b.Navigation("TArticle");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TChannel", b =>
                {
                    b.Navigation("TCategory");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionArea", b =>
                {
                    b.Navigation("TRegionTown");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionCity", b =>
                {
                    b.Navigation("TRegionArea");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRegionProvince", b =>
                {
                    b.Navigation("TRegionCity");
                });

            modelBuilder.Entity("kevin.Domain.Kevin.TRole", b =>
                {
                    b.Navigation("RoleUserList");
                });
#pragma warning restore 612, 618
        }
    }
}
